# SAM template version declaration
# NOTE: These two lines are required for SAM templates
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31 # Enables SAM functionality

# NOTE: Resources section is where you define all AWS resources in SAM/CloudFormation
Resources:
  # Table for storing weekly schedule views
  # Access Patterns:
  # 1. Get all schedules for a user's week:
  #    - Query by userId (HASH) + weekStart (RANGE)
  #    - Used for conflict resolution
  #    Example Query:
  #    ```typescript
  #    await dynamodb.getWeeklySchedules(
  #      userId: "user123",
  #      weekStart: "2024-03-18"  // Monday's date
  #    );
  #    ```
  # 2. Update schedules for a specific day:
  #    - First get the week's data
  #    - Update the specific day's array
  #    - Used for conflict resolution
  #    Example Update:
  #    ```typescript
  #    await dynamodb.updateDaySchedules(
  #      userId: "user123",
  #      weekStart: "2024-03-18",
  #      day: "monday",
  #      schedules: [/* updated schedules */]
  #    );
  #    ```
  WeeklySchedulesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # Table name will be like: prod-weekly-schedules
      TableName: ${self:custom.weeklySchedulesTable}
      BillingMode: PAY_PER_REQUEST

      AttributeDefinitions:
        # Primary partition key - user ID
        - AttributeName: userId
          AttributeType: S
        # Primary sort key - week start date (YYYY-MM-DD)
        - AttributeName: weekStart
          AttributeType: S

      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: weekStart
          KeyType: RANGE

      # No GSIs needed as we only query by userId + weekStart
      # No TTL needed as we keep all schedule history

  # Table for storing note operations (collaborative editing)
  # Access Patterns:
  # 1. Get latest operations for a block:
  #    - Query by noteId (HASH) + blockId (RANGE)
  #    - Used for conflict resolution
  #    Example Query:
  #    ```typescript
  #    await dynamodb.queryBlockOperations(
  #      noteId: "note123",
  #      blockId: "block456",
  #      limit: 1  // Get most recent
  #    );
  #    ```
  # 2. Store new operation:
  #    - Put item with noteId + blockId
  #    - Includes operation details and timestamp
  #    - Used for conflict resolution
  #    Example Put:
  #    ```typescript
  #    await dynamodb.putItem({
  #      TableName: "NoteOperations",
  #      Item: {
  #        noteId: "note123",
  #        blockId: "block456",
  #        operation: { type: "update", content: "new content" },
  #        timestamp: new Date().toISOString(),
  #        version: 2
  #      }
  #    });
  #    ```
  NoteOperationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # Table name will be like: prod-note-operations
      TableName: ${self:custom.noteOperationsTable}
      BillingMode: PAY_PER_REQUEST

      AttributeDefinitions:
        # Primary partition key - note ID
        - AttributeName: noteId
          AttributeType: S
        # Primary sort key - block ID
        - AttributeName: blockId
          AttributeType: S

      KeySchema:
        - AttributeName: noteId
          KeyType: HASH
        - AttributeName: blockId
          KeyType: RANGE

      # TTL to automatically clean up old operations
      # Helps manage storage costs and table size
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

# NOTE: Additional resources like Lambda functions or API Gateway would go here
# For now, we're just defining the DynamoDB tables as that's what we're using

Outputs:
  WeeklySchedulesTableName:
    Description: Name of the WeeklySchedules table
    Value: !Ref WeeklySchedulesTable
    Export:
      Name: !Sub '${AWS::StackName}-WeeklySchedulesTableName'

  NoteOperationsTableName:
    Description: Name of the NoteOperations table
    Value: !Ref NoteOperationsTable
    Export:
      Name: !Sub '${AWS::StackName}-NoteOperationsTableName'
