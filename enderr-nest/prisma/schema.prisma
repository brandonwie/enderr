// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  picture       String?
  schedules     Schedule[] @relation("CreatedSchedules")
  participating Schedule[] @relation("ParticipatingSchedules")
  createdNotes  Note[]     @relation("CreatedNotes")
  collaboratingNotes Note[] @relation("CollaboratingNotes")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("users")
}

// Schedule status enum
enum ScheduleStatus {
  INBOX
  SCHEDULED
  COMPLETED
}

// Block type enum
enum BlockType {
  p       // Paragraph
  h1      // Heading 1
  h2      // Heading 2
  h3      // Heading 3
  code    // Code block
}

// Block operation type enum
enum BlockOperationType {
  update
  create
  delete
  move
}

// Schedule model
model Schedule {
  id          String        @id @default(uuid())
  title       String
  description String?
  startTime   DateTime?
  endTime     DateTime?
  duration    Int          // Duration in minutes
  status      ScheduleStatus
  creator     User         @relation("CreatedSchedules", fields: [creatorId], references: [id])
  creatorId   String
  participants User[]      @relation("ParticipatingSchedules")
  note        Note?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("schedules")
  @@unique([creatorId, id])  // Ensures creator's schedules are unique
  @@index([creatorId])       // For faster lookups by creator
}

// Note model
model Note {
  id           String     @id @default(uuid())
  title        String
  blocks       Block[]    // Changed from content to blocks relation
  version      Int        @default(1)
  creator      User       @relation("CreatedNotes", fields: [creatorId], references: [id])
  creatorId    String
  collaborators User[]    @relation("CollaboratingNotes")
  schedule     Schedule?  @relation(fields: [scheduleId], references: [id])
  scheduleId   String?    @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("notes")
  @@unique([creatorId, id])  // Ensures creator's notes are unique
  @@index([creatorId])       // For faster lookups by creator
}

// Block model for note content
model Block {
  id        String   @id @default(uuid())
  type      BlockType
  content   String
  order     Int
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId, order])
  @@map("blocks")
}