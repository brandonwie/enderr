import { User, UserBasicInfo } from "./user";
import { Note } from "./note";

/**
 * Represents the status of a schedule
 * @remarks Used to track the lifecycle of a schedule
 * @remarks We only track three states:
 * - INBOX: Items not yet placed on calendar
 * - SCHEDULED: Items placed on calendar
 * - COMPLETED: Items marked as done
 */
export enum ScheduleStatus {
  /** Schedule is in inbox, not yet placed on calendar */
  INBOX = "INBOX",
  /** Schedule is placed on calendar */
  SCHEDULED = "SCHEDULED",
  /** Schedule is completed */
  COMPLETED = "COMPLETED",
}

/**
 * Represents the type of item being dragged
 * @remarks Used in drag and drop operations to differentiate between:
 * - INBOX: Items from inbox being placed on calendar
 * - SCHEDULE: Existing schedule items being moved
 */
export enum DragItemType {
  /** Item from inbox being dragged to calendar */
  INBOX = "inbox",
  /** Schedule being moved within calendar */
  SCHEDULE = "schedule",
}

/**
 * Base schedule type without server-generated fields
 * @remarks Used for optimistic updates and temporary states
 * @remarks Does not include server-generated fields:
 * - id (generated by server)
 * - creator (set by server based on auth)
 * - createdAt (set by server)
 * - updatedAt (set by server)
 */
export interface OptimisticSchedule {
  /** Title of the schedule */
  title: string;
  /** Optional description of the schedule */
  description?: string;
  /** Start time of the schedule (undefined for inbox items) */
  startTime?: Date;
  /** End time of the schedule (undefined for inbox items) */
  endTime?: Date;
  /** Duration in minutes (used when schedule is in INBOX status) */
  duration: number;
  /** Current status of the schedule */
  status: ScheduleStatus;
  /** Note linked to this schedule */
  note?: Note;
  /** Participants in the schedule */
  participants: UserBasicInfo[];
}

/**
 * Full schedule type with server-generated fields
 * @remarks This is the main entity for calendar events
 * @extends OptimisticSchedule
 */
export interface Schedule extends OptimisticSchedule {
  /** Unique identifier (server-generated) */
  id: string;
  /** Creator of the schedule (set by server based on auth) */
  creator: UserBasicInfo;
  /** Timestamp when the schedule was created */
  createdAt: Date;
  /** Timestamp when the schedule was last updated */
  updatedAt: Date;
}

/**
 * Input type for creating a schedule
 * @remarks
 * - For INBOX items, startTime and endTime are optional
 * - For calendar items, they are required
 */
export interface CreateScheduleInput {
  /** Title of the schedule */
  title: string;
  /** Optional description */
  description?: string;
  /** Start time (required for calendar items) */
  startTime?: Date;
  /** End time (required for calendar items) */
  endTime?: Date;
  /** Duration in minutes */
  duration: number;
  /** Status of the schedule */
  status: ScheduleStatus;
  /** Initial participants (optional) */
  participants?: UserBasicInfo[];
  /** Initial note (optional) */
  note?: Note;
}

/**
 * Input type for updating a schedule
 */
export interface UpdateScheduleInput {
  /** Schedule ID to update */
  id: string;
  /** Updated title */
  title?: string;
  /** Updated description */
  description?: string;
  /** Updated start time */
  startTime?: Date;
  /** Updated end time */
  endTime?: Date;
  /** Updated duration */
  duration?: number;
  /** Updated status */
  status?: ScheduleStatus;
  /** Updated participants */
  participants?: UserBasicInfo[];
  /** Updated note */
  note?: Note;
}

/**
 * Represents the minimal schedule information for DynamoDB
 * @remarks Used for quick calendar rendering and drag-drop operations
 */
export interface DailySchedule {
  /** Schedule ID to fetch details from PostgreSQL */
  id: string;
  /** Schedule title for display */
  title: string;
  /** Start time in ISO string format */
  startTime: string;
  /** End time in ISO string format */
  endTime: string;
}

/**
 * Represents a week's worth of schedules in DynamoDB
 * @remarks Organized by day for quick access and updates
 * @remarks Each day's schedules are ordered by startTime
 */
export interface WeeklySchedules {
  /** User ID (HASH key) */
  userId: string;
  /** Start of week in ISO format (RANGE key) */
  weekStart: string;
  /** Schedules organized by day */
  schedules: {
    /** Monday's schedules ordered by time */
    monday: DailySchedule[];
    /** Tuesday's schedules ordered by time */
    tuesday: DailySchedule[];
    /** Wednesday's schedules ordered by time */
    wednesday: DailySchedule[];
    /** Thursday's schedules ordered by time */
    thursday: DailySchedule[];
    /** Friday's schedules ordered by time */
    friday: DailySchedule[];
  };
}
